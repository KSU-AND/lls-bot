from enums4bot import *
from BOT_functions import *
from DB_functions import *
import mysecrets

@bot.message_handler(commands=["start"])
def cmd_start(message):
    user_id = message.chat.id

    if not check_user_in_db(user_id) or check_role_is_null(user_id):
        bot.send_message(user_id, 
                         "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n"\
                         "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –∂–∏–≤–æ–π "\
                         "–ø–µ—Ä–µ–ø–∏—Å–∫–∏ –Ω–∞ –õ–µ—Ç–Ω–µ–π –õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –®–∫–æ–ª–µ.\n\n"\
                         "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è, –∫—Ç–æ –í—ã?",  
                         reply_markup = create_markup(Answers.STUDENT.value,
                                                      Answers.ADMIN.value))
        add_user(user_id)
        set_state(user_id, States.U_ROLE)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id_{user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.")

    elif get_role(user_id) != Roles.STUDENT.value:
        set_state(user_id, States.A_CODE)
        bot.send_message(user_id, 
                         "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –∫–æ–¥:\n", 
                         reply_markup = create_markup())
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id_{user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∫–æ–¥.")

    elif not get_name(user_id):
        set_state(user_id, States.S_NAME)
        bot.send_message(user_id, 
                         "–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è.\n"\
                         "(–ò—Ö –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –∏ –ø–æ—á—Ç–∞–ª—å–æ–Ω)", 
                         reply_markup = create_markup())

    elif check_nickname_is_null(user_id):
        set_state(user_id, States.S_NICKNAME)
        bot.send_message(user_id, 
                         f"–ü—Ä–∏–≤–µ—Ç, {get_name(user_id)}! \n"\
                         "–ü—Ä–∏–¥—É–º–∞–π –∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º:", 
                         reply_markup = create_markup())
    else:
        set_state(user_id, States.S_FULL)
        bot.send_message(user_id, 
                         f"–ü—Ä–∏–≤–µ—Ç, {get_name(user_id)}! \n"\
                         "–Ø –º–æ–≥—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Ç–µ–±–µ —Ç–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, "\
                         "–∫–∞–∫–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º —É —Ç–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ –ø–æ –ø–µ—Ä–µ–ø–∏—Å–∫–µ (–µ—Å–ª–∏ –∂–µ—Ä–µ–±—å–µ–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞)", 
                         reply_markup = create_markup(Answers.NICKNAME.value,
                                                      Answers.FRIEND.value))
        send_cmds(user_id, toss_is_able())

@bot.message_handler(commands=["help"],
                     func=lambda message: get_state(message.chat.id) == States.S_FULL)
def cmd_help(message):
    user_id = message.chat.id
    friend = get_friend(user_id)
    friend = ("`" + get_nickname(friend) + "`") if friend else "–ø–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    bot.send_message(user_id,
                     "*–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ*\n"
                     f"–ò–º—è: `{get_name(user_id)}`\n"
                     f"–ü—Å–µ–≤–¥–æ–Ω–∏–º: `{get_nickname(user_id)}`\n"
                     f"–ö–æ–º–Ω–∞—Ç–∞: `{get_room(user_id)}`\n"
                     f"–î—Ä—É–≥ –ø–æ –ø–µ—Ä–µ–ø–∏—Å–∫–µ: {friend}",
                     parse_mode="MarkdownV2")

    send_cmds(user_id, toss_is_able())
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_name(user_id)} –≤—ã–∑–≤–∞–ª HELP.")

@bot.message_handler(commands=["help"])
def cmd_help(message):
    user_id = message.chat.id
    bot.send_message(user_id,
                     "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞, –∫–æ–≥–¥–∞ —Ç—ã –¥–æ –∫–æ–Ω—Ü–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ—à—å—Å—è.")
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª HELP –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤—à–∏—Å—å –¥–æ –∫–æ–Ω—Ü–∞.")

@bot.message_handler(commands=["fix_name"],
                     func=lambda message: get_state(message.chat.id) == States.S_FULL)
def cmd_fix_name(message):
    user_id = message.chat.id

    if not toss_is_able():
        bot.send_message(user_id, 
                         "–ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –∏ –ø–æ–º–µ–Ω—è—Ç—å –∏–º—è —É–∂–µ –Ω–µ–ª—å–∑—è")
        return False

    set_state(user_id, States.S_FIX_NAME)
    
    bot.send_message(user_id, 
                         "*–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –∏–∑–º–µ–Ω–∏–º —Ç–≤–æ–µ –∏–º—è*\n"\
                         f"–¢–≤–æ–µ –∏–º—è —Å–µ–π—á–∞—Å: `{get_name(user_id)}`\n"\
                         "–í–≤–µ–¥–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è\n"\
                         "\(–ò—Ö –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –∏ –ø–æ—á—Ç–∞–ª—å–æ–Ω\)",
                         parse_mode="MarkdownV2",
                         reply_markup = create_markup())
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_name(user_id)} —Ä–µ—à–∏–ª –ø–æ–º–µ–Ω—è—Ç—å –∏–º—è.")

@bot.message_handler(func=lambda message: get_state(message.chat.id) == States.S_FIX_NAME)
def fix_name(message):
    user_id = message.chat.id
    msg_text = message.text.strip()
    old_name = get_name(user_id)

    set_state(user_id, States.S_FULL)
    set_name(user_id, msg_text) 

    bot.send_message(user_id, 
                         "*–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã*\n"\
                         f"–¢–≤–æ–µ –∏–º—è —Å–µ–π—á–∞—Å: `{get_name(user_id)}`\n\n"\
                        "–ï—Å–ª–∏ –∑–∞–±—É–¥–µ—à—å —Å–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º, –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –º–Ω–µ –≤ –ª—é–±–æ–π "\
                        "–º–æ–º–µ–Ω—Ç –∏ —è –µ–≥–æ —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω—é\. –£–∑–Ω–∞—Ç—å —Å–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ—Å–ª–µ "\
                        "–ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∂–µ—Ä–µ–±—å–µ–≤–∫–∏ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–¥–µ—Å—å\.",
                         parse_mode="MarkdownV2",
                         reply_markup = create_markup(Answers.NICKNAME.value,
                                                      Answers.FRIEND.value))
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {old_name} –ø–æ–º–µ–Ω—è–ª –∏–º—è –Ω–∞ {get_name(user_id)}.")

@bot.message_handler(commands=["fix_nickname"],
                     func=lambda message: get_state(message.chat.id) == States.S_FULL)
def cmd_fix_nickname(message):
    user_id = message.chat.id

    if not toss_is_able():
        bot.send_message(user_id, 
                         "–ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –∏ –ø–æ–º–µ–Ω—è—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º —É–∂–µ –Ω–µ–ª—å–∑—è")
        return False

    set_state(user_id, States.S_FIX_NICKNAME)
    
    bot.send_message(user_id, 
                         "*–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –∏–∑–º–µ–Ω–∏–º —Ç–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º*\n"\
                         f"–¢–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º —Å–µ–π—á–∞—Å: `{get_nickname(user_id)}`\n"\
                         "–í–≤–µ–¥–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º\n",
                         parse_mode="MarkdownV2",
                         reply_markup = create_markup())
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_name(user_id)} —Ä–µ—à–∏–ª –ø–æ–º–µ–Ω—è—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º.")

@bot.message_handler(func=lambda message: get_state(message.chat.id) == States.S_FIX_NICKNAME)
def fix_nickname(message):
    user_id = message.chat.id
    msg_text = message.text.strip()
    old_nickname = get_nickname(user_id)

    set_state(user_id, States.S_FULL)
    set_nickname(user_id, msg_text) 

    bot.send_message(user_id, 
                         "*–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã*\n"\
                         f"–¢–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º —Å–µ–π—á–∞—Å: `{get_nickname(user_id)}`\n\n"\
                        "–ï—Å–ª–∏ –∑–∞–±—É–¥–µ—à—å —Å–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º, –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –º–Ω–µ –≤ –ª—é–±–æ–π "\
                        "–º–æ–º–µ–Ω—Ç –∏ —è –µ–≥–æ —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω—é\. –£–∑–Ω–∞—Ç—å —Å–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ—Å–ª–µ "\
                        "–ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∂–µ—Ä–µ–±—å–µ–≤–∫–∏ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–¥–µ—Å—å\.",
                         parse_mode="MarkdownV2",
                         reply_markup = create_markup(Answers.NICKNAME.value,
                                                      Answers.FRIEND.value))
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_name(user_id)} –ø–æ–º–µ–Ω—è–ª –ø—Å–µ–≤–¥–æ–Ω–∏–º —Å {old_nickname} –Ω–∞ {get_nickname(user_id)}.")

@bot.message_handler(commands=["fix_room"],
                     func=lambda message: get_state(message.chat.id) == States.S_FULL)
def cmd_fix_room(message):
    user_id = message.chat.id

    if not toss_is_able():
        bot.send_message(user_id, 
                         "–ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –∏ –ø–æ–º–µ–Ω—è—Ç—å –∫–æ–º–Ω–∞—Ç—É —É–∂–µ –Ω–µ–ª—å–∑—è")
        return False

    set_state(user_id, States.S_FIX_ROOM)
    
    bot.send_message(user_id, 
                         "*–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –∏–∑–º–µ–Ω–∏–º —Ç–≤–æ—é –∫–æ–º–Ω–∞—Ç—É*\n"\
                         f"–¢–≤–æ—è –∫–æ–º–Ω–∞—Ç–∞ —Å–µ–π—á–∞—Å: `{get_room(user_id)}`\n"\
                         "–í–≤–µ–¥–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É\n",
                         parse_mode="MarkdownV2",
                         reply_markup = create_markup())
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_name(user_id)} —Ä–µ—à–∏–ª –ø–æ–º–µ–Ω—è—Ç—å –∫–æ–º–Ω–∞—Ç—É.")

@bot.message_handler(func=lambda message: get_state(message.chat.id) == States.S_FIX_ROOM)
def fix_room(message):
    user_id = message.chat.id
    msg_text = message.text.strip()
    old_room = get_nickname(user_id)

    set_state(user_id, States.S_FULL)
    set_room(user_id, msg_text) 

    bot.send_message(user_id, 
                         "*–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã*\n"\
                         f"–¢–≤–æ—è –∫–æ–º–Ω–∞—Ç–∞ —Å–µ–π—á–∞—Å: `{get_room(user_id)}`\n\n"\
                        "–ï—Å–ª–∏ –∑–∞–±—É–¥–µ—à—å —Å–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º, –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –º–Ω–µ –≤ –ª—é–±–æ–π "\
                        "–º–æ–º–µ–Ω—Ç –∏ —è –µ–≥–æ —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω—é\. –£–∑–Ω–∞—Ç—å —Å–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ—Å–ª–µ "\
                        "–ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∂–µ—Ä–µ–±—å–µ–≤–∫–∏ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–¥–µ—Å—å\.",
                         parse_mode="MarkdownV2",
                         reply_markup = create_markup(Answers.NICKNAME.value,
                                                      Answers.FRIEND.value))
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_name(user_id)} –ø–æ–º–µ–Ω—è–ª –∫–æ–º–Ω–∞—Ç—É —Å {old_room} –Ω–∞ {get_room(user_id)}.")

@bot.message_handler(func=lambda message: get_state(message.chat.id) == States.U_ROLE)
def user_entered_role(message):
    user_id = message.chat.id
    msg_text = message.text.strip()
    
    if msg_text == Answers.STUDENT.value:
        set_state(user_id, States.S_NAME)
        set_role(user_id, Roles.STUDENT.value) 

        bot.send_message(user_id, 
                         "–û—Ç–ª–∏—á–Ω–æ! \n"\
                         "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ: –≤–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è.\n"\
                         "(–ò—Ö –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –∏ –ø–æ—á—Ç–∞–ª—å–æ–Ω)", 
                         reply_markup = create_markup())
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id_{user_id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ä–æ–ª—å {Roles.STUDENT.value}.")
    elif msg_text == Answers.ADMIN.value:
        set_state(user_id, States.A_CODE)
        bot.send_message(user_id, 
                         "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –∫–æ–¥:\n", 
                         reply_markup = create_markup())
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id_{user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∫–æ–¥")
    else:
        bot.send_message(user_id, "–í—ã–±–µ—Ä–µ—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–Ω—É –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫.")

@bot.message_handler(func=lambda message: get_state(message.chat.id) == States.S_NAME)
def user_entered_name(message):
    user_id = message.chat.id
    msg_text = message.text.strip()

    set_state(user_id, States.S_NICKNAME)
    set_name(user_id, msg_text) 
    bot.send_message(user_id, 
                         "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! \n"\
                         "–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π –∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º:", 
                         reply_markup = create_markup())
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id_{user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∫–∞–∫ {msg_text}.")

@bot.message_handler(func=lambda message: get_state(message.chat.id) == States.S_NICKNAME)
def user_entered_nickname(message):
    user_id = message.chat.id
    msg_text = message.text.strip()

    if check_nickname_in_db(msg_text):
        bot.send_message(user_id, 
                         "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º —É–∂–µ –µ—Å—Ç—å. –ü—Ä–∏–¥—É–º–∞–π —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.", 
                         reply_markup = create_markup())
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_name(user_id)} –≤–≤–µ–ª –ø—Å–µ–≤–¥–æ–Ω–∏–º {msg_text}, –Ω–æ –æ–Ω —É–∂–µ –∑–∞–Ω—è—Ç.")
    else:
        set_state(user_id, States.S_ROOM)
        set_nickname(user_id, msg_text) 
        bot.send_message(user_id, 
                         "–ü—Ä–∏–Ω—è—Ç–æ! \n"\
                         "–ò –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥. –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç—ã.", 
                         reply_markup = create_markup())
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_name(user_id)} –≤–≤–µ–ª –ø—Å–µ–≤–¥–æ–Ω–∏–º {msg_text}.")

@bot.message_handler(func=lambda message: get_state(message.chat.id) == States.S_ROOM)
def user_entered_room(message):
    user_id = message.chat.id
    msg_text = message.text.strip()

    set_state(user_id, States.S_FULL)
    set_room(user_id, msg_text) 
    bot.send_message(user_id, 
                        "–ü—Ä–∏–Ω—è—Ç–æ! \n"\
                        "–ï—Å–ª–∏ –∑–∞–±—É–¥–µ—à—å —Å–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º, –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫–æ –º–Ω–µ –≤ –ª—é–±–æ–π "\
                        "–º–æ–º–µ–Ω—Ç –∏ —è –µ–≥–æ —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω—é. –£–∑–Ω–∞—Ç—å —Å–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ—Å–ª–µ "\
                        "–ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∂–µ—Ä–µ–±—å–µ–≤–∫–∏ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–¥–µ—Å—å.", 
                        reply_markup = create_markup(Answers.NICKNAME.value,
                                                     Answers.FRIEND.value))
    send_cmds(user_id, toss_is_able())
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_name(user_id)} –≤–≤–µ–ª –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã {msg_text}.")

@bot.message_handler(func=lambda message: get_state(message.chat.id) == States.A_CODE)
def user_entered_code(message):
    user_id = message.chat.id
    msg_text = message.text.strip()

    if msg_text == mysecrets.ADMIN_PASSWORD:
        set_state(user_id, States.A_FULL)
        set_role(user_id, Roles.ADMIN.value)
        bot.send_message(user_id, 
                         "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥! \n"\
                         "–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞–≤—à–∏—Ö—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, "\
                         "–ø—Ä–æ–≤–µ—Å—Ç–∏ –∂–µ—Ä–µ–±—å–µ–≤–∫—É —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏ "\
                         "(–∏–º—è, –ø—Å–µ–¥–≤–æ–Ω–∏–º –∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞).", 
                         reply_markup = create_markup(Answers.TOTAL.value,
                                                      Answers.TOSS.value,
                                                      Answers.DOC.value))
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id_{user_id} –≤–≤–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥, –µ–º—É –ø—Ä–∏—Å–≤–∞–µ–≤–∞–µ—Ç—Å—è —Ä–æ–ª—å {Roles.ADMIN.value}.")
    else:
        bot.send_message(user_id, 
                         "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", 
                         reply_markup = create_markup())
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id_{user_id} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª –∫–æ–¥.")

@bot.message_handler(func=lambda message: get_state(message.chat.id) == States.S_FULL)
def student_wants(message):
    user_id = message.chat.id
    msg_text = message.text.strip()

    if msg_text == Answers.NICKNAME.value:
        bot.send_message(user_id, 
                         f"–¢–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º: `{get_nickname(user_id)}`",
                         parse_mode="MarkdownV2",
                         reply_markup = create_markup(Answers.NICKNAME.value,
                                                      Answers.FRIEND.value))
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_name(user_id)} –ø–æ–ø—Ä–æ—Å–∏–ª –Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏ –ø–æ–ª—É—á–∏–ª –µ–≥–æ.")
    elif msg_text == Answers.FRIEND.value: 
        friend = get_friend(user_id)
        if friend:
            friend = get_nickname(friend)
            bot.send_message(user_id,
                         f"–ü—Å–µ–≤–¥–æ–Ω–∏–º —Ç–≤–æ–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: `{get_nickname(friend)}`",
                         parse_mode="MarkdownV2",
                         reply_markup = create_markup(Answers.NICKNAME.value,
                                                      Answers.FRIEND.value))
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_name(user_id)} –ø–æ–ø—Ä–æ—Å–∏–ª –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏–ª –µ–≥–æ.")
        else:
            bot.send_message(user_id, 
                         f"–ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞. –°–ø—Ä–æ—Å–∏ —É –º–µ–Ω—è –ø–æ–∑–∂–µ", 
                         reply_markup = create_markup(Answers.NICKNAME.value,
                                                      Answers.FRIEND.value))
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_name(user_id)} –ø–æ–ø—Ä–æ—Å–∏–ª –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥—Ä—É–≥–∞, –Ω–æ –∂–µ—Ä–µ–±—å–µ–≤–∫–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ.")

@bot.message_handler(func=lambda message: get_state(message.chat.id) == States.A_FULL)
def admin_wants(message):
    user_id = message.chat.id
    msg_text = message.text.strip()

    if msg_text == Answers.TOTAL.value:
        bot.send_message(user_id, 
                         f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {get_total_students()}",
                         reply_markup = create_markup(Answers.TOTAL.value,
                                                      Answers.TOSS.value,
                                                      Answers.DOC.value))
        print(f"admin_{user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—â–µ–µ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ–ª—É—á–∏–ª –µ–≥–æ.")
    elif msg_text == Answers.TOSS.value:
        if not toss_is_able():
            bot.send_message(user_id, 
                         f"–ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞.",
                         reply_markup = create_markup(Answers.TOTAL.value,
                                                      Answers.TOSS.value,
                                                      Answers.DOC.value))
            print(f"admin_{user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∂–µ—Ä–µ–±—å–µ–≤–∫—É.")
        elif get_total_students() % 2:
            bot.send_message(user_id, 
                         "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "\
                         f"—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({get_total_students()}). –ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∞, "\
                         "–ø–æ–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –±—É–¥–µ—Ç —á–µ—Ç–Ω—ã–º.",
                         reply_markup = create_markup(Answers.TOTAL.value,
                                                      Answers.TOSS.value,
                                                      Answers.DOC.value))
            print(f"admin_{user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –∂–µ—Ä–µ–±—å–µ–≤–∫—É –∏ –Ω–µ –ø—Ä–µ—É—Å–ø–µ–ª.")
        else:
            create_toss()
            bot.send_message(user_id, 
                         f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø—Ä–æ–≤–µ–ª–∏ –∂–µ—Ä–µ–±—å–µ–≤–∫—É! –í—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ "\
                         "—É–≤–∏–¥–µ—Ç—å –≤ –æ–±—â–µ–º —Ñ–∞–π–ª–µ.",
                         reply_markup = create_markup(Answers.TOTAL.value,
                                                      Answers.TOSS.value,
                                                      Answers.DOC.value))
            print(f"admin_{user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–ª –∂–µ—Ä–µ–±—å–µ–≤–∫—É.")
    elif msg_text == Answers.DOC.value:
        create_full_csv_file()
        send_full_csv_file(user_id)
        print(f"admin_{user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—â–∏–π —Ñ–∞–π–ª —Å –±–∞–∑–æ–π –∏ –ø–æ–ª—É—á–∏–ª –µ–≥–æ.")

if __name__ == "__main__":
    bot.infinity_polling(timeout = 10, long_polling_timeout = 5) # –ø–æ—á–µ–º—É-—Ç–æ –≤–µ–∑–¥–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç —Ç–∞–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è